link : https://leetcode.com/problems/path-with-maximum-probability/
sol :
double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end)     {
        vector<pair<int,double>>adj[n];
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back({edges[i][1],succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }
        vector<double>dis(n,0.0);
        dis[start]=1.0;
        vector<bool>vis(n,false);
        priority_queue<pair<double,int>>pq;
        pq.push({dis[start],start});
            while(!pq.empty())
            {
                int t=pq.top().second;
                pq.pop();
            
                vis[t]=true;
                for(auto &i:adj[t])
                {
                    int v=i.first;
                    double w=i.second;
                    if(!vis[v] && dis[v]<(w*(dis[t])))
                    {
                        dis[v]=(dis[t])*w;
                        pq.push({dis[v],v});
                    }
                }
            }
      
            return dis[end];
    }
